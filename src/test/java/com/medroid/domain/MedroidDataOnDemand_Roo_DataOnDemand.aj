// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.medroid.domain;

import com.medroid.domain.MedroidDataOnDemand;
import com.medroid.domain.Patient;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MedroidDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MedroidDataOnDemand: @Component;
    
    private Random MedroidDataOnDemand.rnd = new SecureRandom();
    
    private List<Patient> MedroidDataOnDemand.data;
    
    public Patient MedroidDataOnDemand.getNewTransientPatient(int index) {
        Patient obj = new Patient();
        setAge(obj, index);
        setBloodtype(obj, index);
        setCity(obj, index);
        setDOB(obj, index);
        setFirstName(obj, index);
        setHC(obj, index);
        setLastName(obj, index);
        setMiddleName(obj, index);
        setPassword(obj, index);
        setPatientID(obj, index);
        setProv(obj, index);
        setSex(obj, index);
        setStatus(obj, index);
        setSymptomDesc(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void MedroidDataOnDemand.setAge(Patient obj, int index) {
        int Age = index;
        if (Age > 120) {
            Age = 120;
        }
        obj.setAge(Age);
    }
    
    public void MedroidDataOnDemand.setBloodtype(Patient obj, int index) {
        String Bloodtype = "Bloodtype_" + index;
        obj.setBloodtype(Bloodtype);
    }
    
    public void MedroidDataOnDemand.setCity(Patient obj, int index) {
        String City = "City_" + index;
        obj.setCity(City);
    }
    
    public void MedroidDataOnDemand.setDOB(Patient obj, int index) {
        String DOB = "DOB_" + index;
        obj.setDOB(DOB);
    }
    
    public void MedroidDataOnDemand.setFirstName(Patient obj, int index) {
        String FirstName = "FirstName_" + index;
        obj.setFirstName(FirstName);
    }
    
    public void MedroidDataOnDemand.setHC(Patient obj, int index) {
        String HC = "HC_" + index;
        obj.setHC(HC);
    }
    
    public void MedroidDataOnDemand.setLastName(Patient obj, int index) {
        String LastName = "LastName_" + index;
        obj.setLastName(LastName);
    }
    
    public void MedroidDataOnDemand.setMiddleName(Patient obj, int index) {
        String MiddleName = "MiddleName_" + index;
        obj.setMiddleName(MiddleName);
    }
    
    public void MedroidDataOnDemand.setPassword(Patient obj, int index) {
        String Password = "Password_" + index;
        obj.setPassword(Password);
    }
    
    public void MedroidDataOnDemand.setPatientID(Patient obj, int index) {
        int patientID = index;
        obj.setPatientID(patientID);
    }
    
    public void MedroidDataOnDemand.setProv(Patient obj, int index) {
        String Prov = "Prov_" + index;
        obj.setProv(Prov);
    }
    
    public void MedroidDataOnDemand.setSex(Patient obj, int index) {
        String Sex = "Sex_" + index;
        obj.setSex(Sex);
    }
    
    public void MedroidDataOnDemand.setStatus(Patient obj, int index) {
        String Status = "Status_" + index;
        obj.setStatus(Status);
    }
    
    public void MedroidDataOnDemand.setSymptomDesc(Patient obj, int index) {
        String SymptomDesc = "SymptomDesc_" + index;
        obj.setSymptomDesc(SymptomDesc);
    }
    
    public void MedroidDataOnDemand.setUserName(Patient obj, int index) {
        String UserName = "UserName_" + index;
        obj.setUserName(UserName);
    }
    
    public Patient MedroidDataOnDemand.getSpecificPatient(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Patient obj = data.get(index);
        Long id = obj.getId();
        return Patient.findPatient(id);
    }
    
    public Patient MedroidDataOnDemand.getRandomPatient() {
        init();
        Patient obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Patient.findPatient(id);
    }
    
    public boolean MedroidDataOnDemand.modifyPatient(Patient obj) {
        return false;
    }
    
    public void MedroidDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Patient.findPatientEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Patient' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Patient>();
        for (int i = 0; i < 10; i++) {
            Patient obj = getNewTransientPatient(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
